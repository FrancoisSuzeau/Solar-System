/*
AUTHOR : SUZEAU Fran√ßois

DATE : 26/05/2021

MODULE : Input

NAMEFILE : Input.h

PURPOSE :   - allow the program wich key is used
            - 
*/

#include "Input.hpp"


/***********************************************************************************************************************************************************************/
/*********************************************************************** Constructor and Destructor ********************************************************************/
/***********************************************************************************************************************************************************************/
Input::Input(): m_x(0), m_y(0), m_rel_x(0), m_rel_y(0), /*m_terminate(false),*/ m_scroll(0)
{
    //initialize key array
    for (int i(0); i < SDL_NUM_SCANCODES; i++)
    {
        m_keys[i] = false;
    }
    
    //initialize mouse array
    for (int i(0); i < 8; i++)
    {
        m_mouse_button[i] = false;
    }
}

Input::~Input()
{
    
}

/***********************************************************************************************************************************************************************/
/************************************************************************************ UpdateEvents *********************************************************************/
/***********************************************************************************************************************************************************************/
void Input::updateEvents()
{
    m_rel_x = 0;
    m_rel_y = 0;
    while(SDL_PollEvent(&m_event))
    {
        
        switch (m_event.type)
        {
            //activate a key
            case SDL_KEYDOWN:
                m_keys[m_event.key.keysym.scancode] = true;
                break;
            case SDL_KEYUP:
                m_keys[m_event.key.keysym.scancode] = false;
                break;
            
            //click on the mouse
            case SDL_MOUSEBUTTONDOWN:
                m_mouse_button[m_event.button.button] = true;
                break;
            
            case SDL_MOUSEBUTTONUP:
                m_mouse_button[m_event.button.button] = false;
                break;

            //mouse is moving
            case SDL_MOUSEMOTION:
                m_x = m_event.motion.x;
                m_y = m_event.motion.y;

                m_rel_x = m_event.motion.xrel;
                m_rel_y = m_event.motion.yrel;
                break;

            //clicking on the cross
            // case SDL_WINDOWEVENT:
            //     if(m_event.window.event == SDL_WINDOWEVENT_CLOSE)
            //     {
            //         m_terminate = true;
            //     }
            //     break;

            //scrolling
            case SDL_MOUSEWHEEL:

                if(m_event.wheel.y > 0) //goes up
                {
                    m_scroll = 1;
                }

                if(m_event.wheel.y < 0) //goes down
                {
                    m_scroll = -1;
                }

                break;

            default:
                break;
        }
    }

}

/***********************************************************************************************************************************************************************/
/************************************************************************************ getTerminate *********************************************************************/
/***********************************************************************************************************************************************************************/
// bool Input::getTerminate()
// {
//     return m_terminate;
// }

/***********************************************************************************************************************************************************************/
/***************************************************************************************** getKey **********************************************************************/
/***********************************************************************************************************************************************************************/
bool Input::getKey(const SDL_Scancode key) const
{
    return m_keys[key];
}

/***********************************************************************************************************************************************************************/
/*********************************************************************************** getMouseButton ********************************************************************/
/***********************************************************************************************************************************************************************/
bool Input::getMouseButton(const Uint8 button) const
{
    return m_mouse_button[button];
}

/***********************************************************************************************************************************************************************/
/*********************************************************************************** getMouseMotion ********************************************************************/
/***********************************************************************************************************************************************************************/
bool Input::getMouseMotion() const
{
    if( ( m_rel_x == 0 ) && ( m_rel_y == 0 ) )
    {
        return false;
    }
    else
    {
        return true;
    }
}

/***********************************************************************************************************************************************************************/
/*********************************************************************************** getterPosition ********************************************************************/
/***********************************************************************************************************************************************************************/
int Input::getX() const
{
    return m_x;
}

int Input::getY() const
{
    return m_y;
}

int Input::getXRel() const
{
    return m_rel_x;
}

int Input::getYRel() const
{
    return m_rel_y;
}

SDL_Event Input::getEvent() const
{
    return m_event;
}

int Input::getScroll()
{
    if(m_scroll != 0)
    {
        float tmp = m_scroll;
        m_scroll = 0;
        return tmp;
    }

    return 0;
}

/***********************************************************************************************************************************************************************/
/*********************************************************************************** displayPointer ********************************************************************/
/***********************************************************************************************************************************************************************/
void Input::displayPointer(bool response) const
{
    if(response)
    {
        if(SDL_ShowCursor(SDL_ENABLE) < 0)
        {
            std::cout << ">> Showing cursor : ERROR !" << SDL_GetError() << std::endl;
        }
    }
    else
    {
        if(SDL_ShowCursor(SDL_DISABLE) < 0)
        {
            std::cout << ">> Not Showing cursor : ERROR !" << SDL_GetError() << std::endl;
        }
    }
}

/***********************************************************************************************************************************************************************/
/*********************************************************************************** CpaturePointer ********************************************************************/
/***********************************************************************************************************************************************************************/
void Input::capturePointer(bool response) const
{
    if(response)
    {
        SDL_SetRelativeMouseMode(SDL_TRUE);
    }
    else
    {
        SDL_SetRelativeMouseMode(SDL_FALSE);
    }
}
