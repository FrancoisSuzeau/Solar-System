/*
AUTHOR : SUZEAU FranÃ§ois

DATE : 18/03/2023

MODULE : Renderer::TexturedRenderers::StarRenderer

NAMEFILE : StarRenderer.cpp

PURPOSE : class StarRenderer

*/


#include "StarRenderer.hpp"

/***********************************************************************************************************************************************************************/
/*********************************************************************** Constructor and Destructor ********************************************************************/
/***********************************************************************************************************************************************************************/
StarRenderer::StarRenderer(const float radius, const unsigned int longSegs, const unsigned int latSegs) : super(radius, longSegs, latSegs)
{
    
}


StarRenderer::~StarRenderer()
{
    
}

/***********************************************************************************************************************************************************************/
/******************************************************************************** clean ******************************************************************************/
/***********************************************************************************************************************************************************************/
void StarRenderer::clean()
{
    super::clean();
}

/***********************************************************************************************************************************************************************/
/******************************************************************************** render ******************************************************************************/
/***********************************************************************************************************************************************************************/
void StarRenderer::render(DataManager &data_manager, Object *star)
{
    GLuint t_id = star->getTextureID();
    if(glIsTexture(t_id) == GL_TRUE)
    {
        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, t_id);

        super::render(data_manager, star);

        glActiveTexture(GL_TEXTURE0);
        glBindTexture(GL_TEXTURE_2D, 0);
    }
    
}