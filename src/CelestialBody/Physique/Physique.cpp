/*
AUTHOR : SUZEAU Fran√ßois

DATE : 27/11/2021

MODULE : CelestialBody.Physique

NAMEFILE : Physique.cpp

PURPOSE : class Physique
*/

#include "Physique.hpp"

float Physique::G_const = 0;
std::map<std::string, body_datas> Physique::bodys_data;

/***********************************************************************************************************************************************************************/
/*********************************************************************** Constructor and Destructor ********************************************************************/
/***********************************************************************************************************************************************************************/
Physique::Physique()
{

}

Physique::~Physique()
{

}

/***********************************************************************************************************************************************************************/
/****************************************************************************** InitPhysique ***************************************************************************/
/***********************************************************************************************************************************************************************/
void Physique::InitPhysique()
{
    G_const = 6.6742 * pow(10.0f, -11.0f);

    bodys_data["Sun"] = {glm::vec3(0.0f, 0.0f, 0.0f), 1.989 * pow(10, 30)};
    bodys_data["Mercury"] = {glm::vec3(5790.0f, 0.0f, 0.0f), 3.285 * pow(10, 23)};
    bodys_data["Venus"] = {glm::vec3(0.0f, -10820.0f, 0.0f), 4.867 * pow(10, 24)};
    bodys_data["Earth"] = {glm::vec3(-15000.0f, 0.0f, 0.0f), 5.972 * pow(10, 24)};
    bodys_data["Mars"] = {glm::vec3(0.0f, 22790.0f, 0.0f), 6.39 * pow(10, 23)};
    bodys_data["Jupiter"] = {glm::vec3(77834.0f, 0.0f, 0.0f), 1.898 * pow(10, 27)};
    bodys_data["Saturn"] = {glm::vec3(0.0f, -14267.0f, 0.0f), 5.683 * pow(10, 26)};
    bodys_data["Uranus"] = {glm::vec3(-28707.0f, 0.0f, 0.0f), 8.681 * pow(10, 25)};
    bodys_data["Neptune"] = {glm::vec3(0.0f, 44984.0f, 0.0f), 1.024 * pow(10, 26)};
}

/***********************************************************************************************************************************************************************/
/************************************************************************ getDistanceFromCam ***************************************************************************/
/***********************************************************************************************************************************************************************/
float Physique::getDistanceFromCam(std::string body_name, glm::vec3 ship_pos)
{
    float x = ship_pos.x - bodys_data[body_name].host_position.x;
    float y = ship_pos.y - bodys_data[body_name].host_position.y;
    float z = ship_pos.z - bodys_data[body_name].host_position.z;

    float r_squarre = std::pow(x, 2) + std::pow(y, 2) + std::pow(z, 2);
            
    return std::sqrt(r_squarre);
}

/***********************************************************************************************************************************************************************/
/************************************************************************ getGravInfluence ***************************************************************************/
/***********************************************************************************************************************************************************************/
float Physique::getGravInfluence(std::string body_name, float distance)
{
    float Fab = 0; //with object a making influence on object b (ship)

    Fab = G_const * ( (bodys_data[body_name].host_mass * 1) / pow(distance, 2.0f) );

    return Fab / pow(10, 10);
}